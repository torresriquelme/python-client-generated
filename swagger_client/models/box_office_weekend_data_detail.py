# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BoxOfficeWeekendDataDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'rank': 'str',
        'title': 'str',
        'image': 'str',
        'weekend': 'str',
        'gross': 'str',
        'weeks': 'str'
    }

    attribute_map = {
        'id': 'id',
        'rank': 'rank',
        'title': 'title',
        'image': 'image',
        'weekend': 'weekend',
        'gross': 'gross',
        'weeks': 'weeks'
    }

    def __init__(self, id=None, rank=None, title=None, image=None, weekend=None, gross=None, weeks=None):  # noqa: E501
        """BoxOfficeWeekendDataDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._rank = None
        self._title = None
        self._image = None
        self._weekend = None
        self._gross = None
        self._weeks = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if rank is not None:
            self.rank = rank
        if title is not None:
            self.title = title
        if image is not None:
            self.image = image
        if weekend is not None:
            self.weekend = weekend
        if gross is not None:
            self.gross = gross
        if weeks is not None:
            self.weeks = weeks

    @property
    def id(self):
        """Gets the id of this BoxOfficeWeekendDataDetail.  # noqa: E501


        :return: The id of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BoxOfficeWeekendDataDetail.


        :param id: The id of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rank(self):
        """Gets the rank of this BoxOfficeWeekendDataDetail.  # noqa: E501


        :return: The rank of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this BoxOfficeWeekendDataDetail.


        :param rank: The rank of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :type: str
        """

        self._rank = rank

    @property
    def title(self):
        """Gets the title of this BoxOfficeWeekendDataDetail.  # noqa: E501


        :return: The title of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BoxOfficeWeekendDataDetail.


        :param title: The title of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def image(self):
        """Gets the image of this BoxOfficeWeekendDataDetail.  # noqa: E501


        :return: The image of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this BoxOfficeWeekendDataDetail.


        :param image: The image of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def weekend(self):
        """Gets the weekend of this BoxOfficeWeekendDataDetail.  # noqa: E501


        :return: The weekend of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :rtype: str
        """
        return self._weekend

    @weekend.setter
    def weekend(self, weekend):
        """Sets the weekend of this BoxOfficeWeekendDataDetail.


        :param weekend: The weekend of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :type: str
        """

        self._weekend = weekend

    @property
    def gross(self):
        """Gets the gross of this BoxOfficeWeekendDataDetail.  # noqa: E501


        :return: The gross of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :rtype: str
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this BoxOfficeWeekendDataDetail.


        :param gross: The gross of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :type: str
        """

        self._gross = gross

    @property
    def weeks(self):
        """Gets the weeks of this BoxOfficeWeekendDataDetail.  # noqa: E501


        :return: The weeks of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :rtype: str
        """
        return self._weeks

    @weeks.setter
    def weeks(self, weeks):
        """Sets the weeks of this BoxOfficeWeekendDataDetail.


        :param weeks: The weeks of this BoxOfficeWeekendDataDetail.  # noqa: E501
        :type: str
        """

        self._weeks = weeks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoxOfficeWeekendDataDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoxOfficeWeekendDataDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
