# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NameAwardOutcome(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outcome_year': 'str',
        'outcome_title': 'str',
        'outcome_category': 'str',
        'outcome_details': 'list[NameAwardOutcomeDetail]'
    }

    attribute_map = {
        'outcome_year': 'outcomeYear',
        'outcome_title': 'outcomeTitle',
        'outcome_category': 'outcomeCategory',
        'outcome_details': 'outcomeDetails'
    }

    def __init__(self, outcome_year=None, outcome_title=None, outcome_category=None, outcome_details=None):  # noqa: E501
        """NameAwardOutcome - a model defined in Swagger"""  # noqa: E501
        self._outcome_year = None
        self._outcome_title = None
        self._outcome_category = None
        self._outcome_details = None
        self.discriminator = None
        if outcome_year is not None:
            self.outcome_year = outcome_year
        if outcome_title is not None:
            self.outcome_title = outcome_title
        if outcome_category is not None:
            self.outcome_category = outcome_category
        if outcome_details is not None:
            self.outcome_details = outcome_details

    @property
    def outcome_year(self):
        """Gets the outcome_year of this NameAwardOutcome.  # noqa: E501


        :return: The outcome_year of this NameAwardOutcome.  # noqa: E501
        :rtype: str
        """
        return self._outcome_year

    @outcome_year.setter
    def outcome_year(self, outcome_year):
        """Sets the outcome_year of this NameAwardOutcome.


        :param outcome_year: The outcome_year of this NameAwardOutcome.  # noqa: E501
        :type: str
        """

        self._outcome_year = outcome_year

    @property
    def outcome_title(self):
        """Gets the outcome_title of this NameAwardOutcome.  # noqa: E501


        :return: The outcome_title of this NameAwardOutcome.  # noqa: E501
        :rtype: str
        """
        return self._outcome_title

    @outcome_title.setter
    def outcome_title(self, outcome_title):
        """Sets the outcome_title of this NameAwardOutcome.


        :param outcome_title: The outcome_title of this NameAwardOutcome.  # noqa: E501
        :type: str
        """

        self._outcome_title = outcome_title

    @property
    def outcome_category(self):
        """Gets the outcome_category of this NameAwardOutcome.  # noqa: E501


        :return: The outcome_category of this NameAwardOutcome.  # noqa: E501
        :rtype: str
        """
        return self._outcome_category

    @outcome_category.setter
    def outcome_category(self, outcome_category):
        """Sets the outcome_category of this NameAwardOutcome.


        :param outcome_category: The outcome_category of this NameAwardOutcome.  # noqa: E501
        :type: str
        """

        self._outcome_category = outcome_category

    @property
    def outcome_details(self):
        """Gets the outcome_details of this NameAwardOutcome.  # noqa: E501


        :return: The outcome_details of this NameAwardOutcome.  # noqa: E501
        :rtype: list[NameAwardOutcomeDetail]
        """
        return self._outcome_details

    @outcome_details.setter
    def outcome_details(self, outcome_details):
        """Sets the outcome_details of this NameAwardOutcome.


        :param outcome_details: The outcome_details of this NameAwardOutcome.  # noqa: E501
        :type: list[NameAwardOutcomeDetail]
        """

        self._outcome_details = outcome_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NameAwardOutcome, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NameAwardOutcome):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
