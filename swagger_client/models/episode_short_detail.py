# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EpisodeShortDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'season_number': 'str',
        'episode_number': 'str',
        'title': 'str',
        'image': 'str',
        'year': 'str',
        'released': 'str',
        'plot': 'str',
        'im_db_rating': 'str',
        'im_db_rating_count': 'str'
    }

    attribute_map = {
        'id': 'id',
        'season_number': 'seasonNumber',
        'episode_number': 'episodeNumber',
        'title': 'title',
        'image': 'image',
        'year': 'year',
        'released': 'released',
        'plot': 'plot',
        'im_db_rating': 'imDbRating',
        'im_db_rating_count': 'imDbRatingCount'
    }

    def __init__(self, id=None, season_number=None, episode_number=None, title=None, image=None, year=None, released=None, plot=None, im_db_rating=None, im_db_rating_count=None):  # noqa: E501
        """EpisodeShortDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._season_number = None
        self._episode_number = None
        self._title = None
        self._image = None
        self._year = None
        self._released = None
        self._plot = None
        self._im_db_rating = None
        self._im_db_rating_count = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if season_number is not None:
            self.season_number = season_number
        if episode_number is not None:
            self.episode_number = episode_number
        if title is not None:
            self.title = title
        if image is not None:
            self.image = image
        if year is not None:
            self.year = year
        if released is not None:
            self.released = released
        if plot is not None:
            self.plot = plot
        if im_db_rating is not None:
            self.im_db_rating = im_db_rating
        if im_db_rating_count is not None:
            self.im_db_rating_count = im_db_rating_count

    @property
    def id(self):
        """Gets the id of this EpisodeShortDetail.  # noqa: E501


        :return: The id of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpisodeShortDetail.


        :param id: The id of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def season_number(self):
        """Gets the season_number of this EpisodeShortDetail.  # noqa: E501


        :return: The season_number of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._season_number

    @season_number.setter
    def season_number(self, season_number):
        """Sets the season_number of this EpisodeShortDetail.


        :param season_number: The season_number of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._season_number = season_number

    @property
    def episode_number(self):
        """Gets the episode_number of this EpisodeShortDetail.  # noqa: E501


        :return: The episode_number of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._episode_number

    @episode_number.setter
    def episode_number(self, episode_number):
        """Sets the episode_number of this EpisodeShortDetail.


        :param episode_number: The episode_number of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._episode_number = episode_number

    @property
    def title(self):
        """Gets the title of this EpisodeShortDetail.  # noqa: E501


        :return: The title of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EpisodeShortDetail.


        :param title: The title of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def image(self):
        """Gets the image of this EpisodeShortDetail.  # noqa: E501


        :return: The image of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this EpisodeShortDetail.


        :param image: The image of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def year(self):
        """Gets the year of this EpisodeShortDetail.  # noqa: E501


        :return: The year of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EpisodeShortDetail.


        :param year: The year of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def released(self):
        """Gets the released of this EpisodeShortDetail.  # noqa: E501


        :return: The released of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this EpisodeShortDetail.


        :param released: The released of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._released = released

    @property
    def plot(self):
        """Gets the plot of this EpisodeShortDetail.  # noqa: E501


        :return: The plot of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._plot

    @plot.setter
    def plot(self, plot):
        """Sets the plot of this EpisodeShortDetail.


        :param plot: The plot of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._plot = plot

    @property
    def im_db_rating(self):
        """Gets the im_db_rating of this EpisodeShortDetail.  # noqa: E501


        :return: The im_db_rating of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._im_db_rating

    @im_db_rating.setter
    def im_db_rating(self, im_db_rating):
        """Sets the im_db_rating of this EpisodeShortDetail.


        :param im_db_rating: The im_db_rating of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._im_db_rating = im_db_rating

    @property
    def im_db_rating_count(self):
        """Gets the im_db_rating_count of this EpisodeShortDetail.  # noqa: E501


        :return: The im_db_rating_count of this EpisodeShortDetail.  # noqa: E501
        :rtype: str
        """
        return self._im_db_rating_count

    @im_db_rating_count.setter
    def im_db_rating_count(self, im_db_rating_count):
        """Sets the im_db_rating_count of this EpisodeShortDetail.


        :param im_db_rating_count: The im_db_rating_count of this EpisodeShortDetail.  # noqa: E501
        :type: str
        """

        self._im_db_rating_count = im_db_rating_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpisodeShortDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpisodeShortDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
