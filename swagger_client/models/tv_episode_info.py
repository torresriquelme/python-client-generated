# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TvEpisodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'series_id': 'str',
        'series_title': 'str',
        'series_full_title': 'str',
        'series_year': 'str',
        'series_year_end': 'str',
        'season_number': 'str',
        'episode_number': 'str',
        'previous_episode_id': 'str',
        'next_episode_id': 'str'
    }

    attribute_map = {
        'series_id': 'seriesId',
        'series_title': 'seriesTitle',
        'series_full_title': 'seriesFullTitle',
        'series_year': 'seriesYear',
        'series_year_end': 'seriesYearEnd',
        'season_number': 'seasonNumber',
        'episode_number': 'episodeNumber',
        'previous_episode_id': 'previousEpisodeId',
        'next_episode_id': 'nextEpisodeId'
    }

    def __init__(self, series_id=None, series_title=None, series_full_title=None, series_year=None, series_year_end=None, season_number=None, episode_number=None, previous_episode_id=None, next_episode_id=None):  # noqa: E501
        """TvEpisodeInfo - a model defined in Swagger"""  # noqa: E501
        self._series_id = None
        self._series_title = None
        self._series_full_title = None
        self._series_year = None
        self._series_year_end = None
        self._season_number = None
        self._episode_number = None
        self._previous_episode_id = None
        self._next_episode_id = None
        self.discriminator = None
        if series_id is not None:
            self.series_id = series_id
        if series_title is not None:
            self.series_title = series_title
        if series_full_title is not None:
            self.series_full_title = series_full_title
        if series_year is not None:
            self.series_year = series_year
        if series_year_end is not None:
            self.series_year_end = series_year_end
        if season_number is not None:
            self.season_number = season_number
        if episode_number is not None:
            self.episode_number = episode_number
        if previous_episode_id is not None:
            self.previous_episode_id = previous_episode_id
        if next_episode_id is not None:
            self.next_episode_id = next_episode_id

    @property
    def series_id(self):
        """Gets the series_id of this TvEpisodeInfo.  # noqa: E501


        :return: The series_id of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this TvEpisodeInfo.


        :param series_id: The series_id of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._series_id = series_id

    @property
    def series_title(self):
        """Gets the series_title of this TvEpisodeInfo.  # noqa: E501


        :return: The series_title of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._series_title

    @series_title.setter
    def series_title(self, series_title):
        """Sets the series_title of this TvEpisodeInfo.


        :param series_title: The series_title of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._series_title = series_title

    @property
    def series_full_title(self):
        """Gets the series_full_title of this TvEpisodeInfo.  # noqa: E501


        :return: The series_full_title of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._series_full_title

    @series_full_title.setter
    def series_full_title(self, series_full_title):
        """Sets the series_full_title of this TvEpisodeInfo.


        :param series_full_title: The series_full_title of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._series_full_title = series_full_title

    @property
    def series_year(self):
        """Gets the series_year of this TvEpisodeInfo.  # noqa: E501


        :return: The series_year of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._series_year

    @series_year.setter
    def series_year(self, series_year):
        """Sets the series_year of this TvEpisodeInfo.


        :param series_year: The series_year of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._series_year = series_year

    @property
    def series_year_end(self):
        """Gets the series_year_end of this TvEpisodeInfo.  # noqa: E501


        :return: The series_year_end of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._series_year_end

    @series_year_end.setter
    def series_year_end(self, series_year_end):
        """Sets the series_year_end of this TvEpisodeInfo.


        :param series_year_end: The series_year_end of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._series_year_end = series_year_end

    @property
    def season_number(self):
        """Gets the season_number of this TvEpisodeInfo.  # noqa: E501


        :return: The season_number of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._season_number

    @season_number.setter
    def season_number(self, season_number):
        """Sets the season_number of this TvEpisodeInfo.


        :param season_number: The season_number of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._season_number = season_number

    @property
    def episode_number(self):
        """Gets the episode_number of this TvEpisodeInfo.  # noqa: E501


        :return: The episode_number of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._episode_number

    @episode_number.setter
    def episode_number(self, episode_number):
        """Sets the episode_number of this TvEpisodeInfo.


        :param episode_number: The episode_number of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._episode_number = episode_number

    @property
    def previous_episode_id(self):
        """Gets the previous_episode_id of this TvEpisodeInfo.  # noqa: E501


        :return: The previous_episode_id of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._previous_episode_id

    @previous_episode_id.setter
    def previous_episode_id(self, previous_episode_id):
        """Sets the previous_episode_id of this TvEpisodeInfo.


        :param previous_episode_id: The previous_episode_id of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._previous_episode_id = previous_episode_id

    @property
    def next_episode_id(self):
        """Gets the next_episode_id of this TvEpisodeInfo.  # noqa: E501


        :return: The next_episode_id of this TvEpisodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._next_episode_id

    @next_episode_id.setter
    def next_episode_id(self, next_episode_id):
        """Sets the next_episode_id of this TvEpisodeInfo.


        :param next_episode_id: The next_episode_id of this TvEpisodeInfo.  # noqa: E501
        :type: str
        """

        self._next_episode_id = next_episode_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TvEpisodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TvEpisodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
