# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BoxOfficeShort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'budget': 'str',
        'opening_weekend_usa': 'str',
        'gross_usa': 'str',
        'cumulative_worldwide_gross': 'str'
    }

    attribute_map = {
        'budget': 'budget',
        'opening_weekend_usa': 'openingWeekendUSA',
        'gross_usa': 'grossUSA',
        'cumulative_worldwide_gross': 'cumulativeWorldwideGross'
    }

    def __init__(self, budget=None, opening_weekend_usa=None, gross_usa=None, cumulative_worldwide_gross=None):  # noqa: E501
        """BoxOfficeShort - a model defined in Swagger"""  # noqa: E501
        self._budget = None
        self._opening_weekend_usa = None
        self._gross_usa = None
        self._cumulative_worldwide_gross = None
        self.discriminator = None
        if budget is not None:
            self.budget = budget
        if opening_weekend_usa is not None:
            self.opening_weekend_usa = opening_weekend_usa
        if gross_usa is not None:
            self.gross_usa = gross_usa
        if cumulative_worldwide_gross is not None:
            self.cumulative_worldwide_gross = cumulative_worldwide_gross

    @property
    def budget(self):
        """Gets the budget of this BoxOfficeShort.  # noqa: E501


        :return: The budget of this BoxOfficeShort.  # noqa: E501
        :rtype: str
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this BoxOfficeShort.


        :param budget: The budget of this BoxOfficeShort.  # noqa: E501
        :type: str
        """

        self._budget = budget

    @property
    def opening_weekend_usa(self):
        """Gets the opening_weekend_usa of this BoxOfficeShort.  # noqa: E501


        :return: The opening_weekend_usa of this BoxOfficeShort.  # noqa: E501
        :rtype: str
        """
        return self._opening_weekend_usa

    @opening_weekend_usa.setter
    def opening_weekend_usa(self, opening_weekend_usa):
        """Sets the opening_weekend_usa of this BoxOfficeShort.


        :param opening_weekend_usa: The opening_weekend_usa of this BoxOfficeShort.  # noqa: E501
        :type: str
        """

        self._opening_weekend_usa = opening_weekend_usa

    @property
    def gross_usa(self):
        """Gets the gross_usa of this BoxOfficeShort.  # noqa: E501


        :return: The gross_usa of this BoxOfficeShort.  # noqa: E501
        :rtype: str
        """
        return self._gross_usa

    @gross_usa.setter
    def gross_usa(self, gross_usa):
        """Sets the gross_usa of this BoxOfficeShort.


        :param gross_usa: The gross_usa of this BoxOfficeShort.  # noqa: E501
        :type: str
        """

        self._gross_usa = gross_usa

    @property
    def cumulative_worldwide_gross(self):
        """Gets the cumulative_worldwide_gross of this BoxOfficeShort.  # noqa: E501


        :return: The cumulative_worldwide_gross of this BoxOfficeShort.  # noqa: E501
        :rtype: str
        """
        return self._cumulative_worldwide_gross

    @cumulative_worldwide_gross.setter
    def cumulative_worldwide_gross(self, cumulative_worldwide_gross):
        """Sets the cumulative_worldwide_gross of this BoxOfficeShort.


        :param cumulative_worldwide_gross: The cumulative_worldwide_gross of this BoxOfficeShort.  # noqa: E501
        :type: str
        """

        self._cumulative_worldwide_gross = cumulative_worldwide_gross

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoxOfficeShort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoxOfficeShort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
