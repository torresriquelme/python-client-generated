# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TitleData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'original_title': 'str',
        'full_title': 'str',
        'type': 'str',
        'year': 'str',
        'image': 'str',
        'release_date': 'str',
        'runtime_mins': 'str',
        'runtime_str': 'str',
        'plot': 'str',
        'plot_local': 'str',
        'plot_local_is_rtl': 'bool',
        'awards': 'str',
        'directors': 'str',
        'director_list': 'list[StarShort]',
        'writers': 'str',
        'writer_list': 'list[StarShort]',
        'stars': 'str',
        'star_list': 'list[StarShort]',
        'actor_list': 'list[ActorShort]',
        'full_cast': 'FullCastData',
        'genres': 'str',
        'genre_list': 'list[KeyValueItem]',
        'companies': 'str',
        'company_list': 'list[CompanyShort]',
        'countries': 'str',
        'country_list': 'list[KeyValueItem]',
        'languages': 'str',
        'language_list': 'list[KeyValueItem]',
        'content_rating': 'str',
        'im_db_rating': 'str',
        'im_db_rating_votes': 'str',
        'metacritic_rating': 'str',
        'ratings': 'RatingData',
        'wikipedia': 'WikipediaData',
        'posters': 'PosterData',
        'images': 'ImageData',
        'trailer': 'TrailerData',
        'box_office': 'BoxOfficeShort',
        'tagline': 'str',
        'keywords': 'str',
        'keyword_list': 'list[str]',
        'similars': 'list[SimilarShort]',
        'tv_series_info': 'TvSeriesInfo',
        'tv_episode_info': 'TvEpisodeInfo',
        'error_message': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'original_title': 'originalTitle',
        'full_title': 'fullTitle',
        'type': 'type',
        'year': 'year',
        'image': 'image',
        'release_date': 'releaseDate',
        'runtime_mins': 'runtimeMins',
        'runtime_str': 'runtimeStr',
        'plot': 'plot',
        'plot_local': 'plotLocal',
        'plot_local_is_rtl': 'plotLocalIsRtl',
        'awards': 'awards',
        'directors': 'directors',
        'director_list': 'directorList',
        'writers': 'writers',
        'writer_list': 'writerList',
        'stars': 'stars',
        'star_list': 'starList',
        'actor_list': 'actorList',
        'full_cast': 'fullCast',
        'genres': 'genres',
        'genre_list': 'genreList',
        'companies': 'companies',
        'company_list': 'companyList',
        'countries': 'countries',
        'country_list': 'countryList',
        'languages': 'languages',
        'language_list': 'languageList',
        'content_rating': 'contentRating',
        'im_db_rating': 'imDbRating',
        'im_db_rating_votes': 'imDbRatingVotes',
        'metacritic_rating': 'metacriticRating',
        'ratings': 'ratings',
        'wikipedia': 'wikipedia',
        'posters': 'posters',
        'images': 'images',
        'trailer': 'trailer',
        'box_office': 'boxOffice',
        'tagline': 'tagline',
        'keywords': 'keywords',
        'keyword_list': 'keywordList',
        'similars': 'similars',
        'tv_series_info': 'tvSeriesInfo',
        'tv_episode_info': 'tvEpisodeInfo',
        'error_message': 'errorMessage'
    }

    def __init__(self, id=None, title=None, original_title=None, full_title=None, type=None, year=None, image=None, release_date=None, runtime_mins=None, runtime_str=None, plot=None, plot_local=None, plot_local_is_rtl=None, awards=None, directors=None, director_list=None, writers=None, writer_list=None, stars=None, star_list=None, actor_list=None, full_cast=None, genres=None, genre_list=None, companies=None, company_list=None, countries=None, country_list=None, languages=None, language_list=None, content_rating=None, im_db_rating=None, im_db_rating_votes=None, metacritic_rating=None, ratings=None, wikipedia=None, posters=None, images=None, trailer=None, box_office=None, tagline=None, keywords=None, keyword_list=None, similars=None, tv_series_info=None, tv_episode_info=None, error_message=None):  # noqa: E501
        """TitleData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._original_title = None
        self._full_title = None
        self._type = None
        self._year = None
        self._image = None
        self._release_date = None
        self._runtime_mins = None
        self._runtime_str = None
        self._plot = None
        self._plot_local = None
        self._plot_local_is_rtl = None
        self._awards = None
        self._directors = None
        self._director_list = None
        self._writers = None
        self._writer_list = None
        self._stars = None
        self._star_list = None
        self._actor_list = None
        self._full_cast = None
        self._genres = None
        self._genre_list = None
        self._companies = None
        self._company_list = None
        self._countries = None
        self._country_list = None
        self._languages = None
        self._language_list = None
        self._content_rating = None
        self._im_db_rating = None
        self._im_db_rating_votes = None
        self._metacritic_rating = None
        self._ratings = None
        self._wikipedia = None
        self._posters = None
        self._images = None
        self._trailer = None
        self._box_office = None
        self._tagline = None
        self._keywords = None
        self._keyword_list = None
        self._similars = None
        self._tv_series_info = None
        self._tv_episode_info = None
        self._error_message = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if original_title is not None:
            self.original_title = original_title
        if full_title is not None:
            self.full_title = full_title
        if type is not None:
            self.type = type
        if year is not None:
            self.year = year
        if image is not None:
            self.image = image
        if release_date is not None:
            self.release_date = release_date
        if runtime_mins is not None:
            self.runtime_mins = runtime_mins
        if runtime_str is not None:
            self.runtime_str = runtime_str
        if plot is not None:
            self.plot = plot
        if plot_local is not None:
            self.plot_local = plot_local
        if plot_local_is_rtl is not None:
            self.plot_local_is_rtl = plot_local_is_rtl
        if awards is not None:
            self.awards = awards
        if directors is not None:
            self.directors = directors
        if director_list is not None:
            self.director_list = director_list
        if writers is not None:
            self.writers = writers
        if writer_list is not None:
            self.writer_list = writer_list
        if stars is not None:
            self.stars = stars
        if star_list is not None:
            self.star_list = star_list
        if actor_list is not None:
            self.actor_list = actor_list
        if full_cast is not None:
            self.full_cast = full_cast
        if genres is not None:
            self.genres = genres
        if genre_list is not None:
            self.genre_list = genre_list
        if companies is not None:
            self.companies = companies
        if company_list is not None:
            self.company_list = company_list
        if countries is not None:
            self.countries = countries
        if country_list is not None:
            self.country_list = country_list
        if languages is not None:
            self.languages = languages
        if language_list is not None:
            self.language_list = language_list
        if content_rating is not None:
            self.content_rating = content_rating
        if im_db_rating is not None:
            self.im_db_rating = im_db_rating
        if im_db_rating_votes is not None:
            self.im_db_rating_votes = im_db_rating_votes
        if metacritic_rating is not None:
            self.metacritic_rating = metacritic_rating
        if ratings is not None:
            self.ratings = ratings
        if wikipedia is not None:
            self.wikipedia = wikipedia
        if posters is not None:
            self.posters = posters
        if images is not None:
            self.images = images
        if trailer is not None:
            self.trailer = trailer
        if box_office is not None:
            self.box_office = box_office
        if tagline is not None:
            self.tagline = tagline
        if keywords is not None:
            self.keywords = keywords
        if keyword_list is not None:
            self.keyword_list = keyword_list
        if similars is not None:
            self.similars = similars
        if tv_series_info is not None:
            self.tv_series_info = tv_series_info
        if tv_episode_info is not None:
            self.tv_episode_info = tv_episode_info
        if error_message is not None:
            self.error_message = error_message

    @property
    def id(self):
        """Gets the id of this TitleData.  # noqa: E501


        :return: The id of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TitleData.


        :param id: The id of this TitleData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this TitleData.  # noqa: E501


        :return: The title of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TitleData.


        :param title: The title of this TitleData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def original_title(self):
        """Gets the original_title of this TitleData.  # noqa: E501


        :return: The original_title of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._original_title

    @original_title.setter
    def original_title(self, original_title):
        """Sets the original_title of this TitleData.


        :param original_title: The original_title of this TitleData.  # noqa: E501
        :type: str
        """

        self._original_title = original_title

    @property
    def full_title(self):
        """Gets the full_title of this TitleData.  # noqa: E501


        :return: The full_title of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._full_title

    @full_title.setter
    def full_title(self, full_title):
        """Sets the full_title of this TitleData.


        :param full_title: The full_title of this TitleData.  # noqa: E501
        :type: str
        """

        self._full_title = full_title

    @property
    def type(self):
        """Gets the type of this TitleData.  # noqa: E501


        :return: The type of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TitleData.


        :param type: The type of this TitleData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def year(self):
        """Gets the year of this TitleData.  # noqa: E501


        :return: The year of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this TitleData.


        :param year: The year of this TitleData.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def image(self):
        """Gets the image of this TitleData.  # noqa: E501


        :return: The image of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this TitleData.


        :param image: The image of this TitleData.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def release_date(self):
        """Gets the release_date of this TitleData.  # noqa: E501


        :return: The release_date of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this TitleData.


        :param release_date: The release_date of this TitleData.  # noqa: E501
        :type: str
        """

        self._release_date = release_date

    @property
    def runtime_mins(self):
        """Gets the runtime_mins of this TitleData.  # noqa: E501


        :return: The runtime_mins of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._runtime_mins

    @runtime_mins.setter
    def runtime_mins(self, runtime_mins):
        """Sets the runtime_mins of this TitleData.


        :param runtime_mins: The runtime_mins of this TitleData.  # noqa: E501
        :type: str
        """

        self._runtime_mins = runtime_mins

    @property
    def runtime_str(self):
        """Gets the runtime_str of this TitleData.  # noqa: E501


        :return: The runtime_str of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._runtime_str

    @runtime_str.setter
    def runtime_str(self, runtime_str):
        """Sets the runtime_str of this TitleData.


        :param runtime_str: The runtime_str of this TitleData.  # noqa: E501
        :type: str
        """

        self._runtime_str = runtime_str

    @property
    def plot(self):
        """Gets the plot of this TitleData.  # noqa: E501


        :return: The plot of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._plot

    @plot.setter
    def plot(self, plot):
        """Sets the plot of this TitleData.


        :param plot: The plot of this TitleData.  # noqa: E501
        :type: str
        """

        self._plot = plot

    @property
    def plot_local(self):
        """Gets the plot_local of this TitleData.  # noqa: E501


        :return: The plot_local of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._plot_local

    @plot_local.setter
    def plot_local(self, plot_local):
        """Sets the plot_local of this TitleData.


        :param plot_local: The plot_local of this TitleData.  # noqa: E501
        :type: str
        """

        self._plot_local = plot_local

    @property
    def plot_local_is_rtl(self):
        """Gets the plot_local_is_rtl of this TitleData.  # noqa: E501


        :return: The plot_local_is_rtl of this TitleData.  # noqa: E501
        :rtype: bool
        """
        return self._plot_local_is_rtl

    @plot_local_is_rtl.setter
    def plot_local_is_rtl(self, plot_local_is_rtl):
        """Sets the plot_local_is_rtl of this TitleData.


        :param plot_local_is_rtl: The plot_local_is_rtl of this TitleData.  # noqa: E501
        :type: bool
        """

        self._plot_local_is_rtl = plot_local_is_rtl

    @property
    def awards(self):
        """Gets the awards of this TitleData.  # noqa: E501


        :return: The awards of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this TitleData.


        :param awards: The awards of this TitleData.  # noqa: E501
        :type: str
        """

        self._awards = awards

    @property
    def directors(self):
        """Gets the directors of this TitleData.  # noqa: E501


        :return: The directors of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._directors

    @directors.setter
    def directors(self, directors):
        """Sets the directors of this TitleData.


        :param directors: The directors of this TitleData.  # noqa: E501
        :type: str
        """

        self._directors = directors

    @property
    def director_list(self):
        """Gets the director_list of this TitleData.  # noqa: E501


        :return: The director_list of this TitleData.  # noqa: E501
        :rtype: list[StarShort]
        """
        return self._director_list

    @director_list.setter
    def director_list(self, director_list):
        """Sets the director_list of this TitleData.


        :param director_list: The director_list of this TitleData.  # noqa: E501
        :type: list[StarShort]
        """

        self._director_list = director_list

    @property
    def writers(self):
        """Gets the writers of this TitleData.  # noqa: E501


        :return: The writers of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._writers

    @writers.setter
    def writers(self, writers):
        """Sets the writers of this TitleData.


        :param writers: The writers of this TitleData.  # noqa: E501
        :type: str
        """

        self._writers = writers

    @property
    def writer_list(self):
        """Gets the writer_list of this TitleData.  # noqa: E501


        :return: The writer_list of this TitleData.  # noqa: E501
        :rtype: list[StarShort]
        """
        return self._writer_list

    @writer_list.setter
    def writer_list(self, writer_list):
        """Sets the writer_list of this TitleData.


        :param writer_list: The writer_list of this TitleData.  # noqa: E501
        :type: list[StarShort]
        """

        self._writer_list = writer_list

    @property
    def stars(self):
        """Gets the stars of this TitleData.  # noqa: E501


        :return: The stars of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this TitleData.


        :param stars: The stars of this TitleData.  # noqa: E501
        :type: str
        """

        self._stars = stars

    @property
    def star_list(self):
        """Gets the star_list of this TitleData.  # noqa: E501


        :return: The star_list of this TitleData.  # noqa: E501
        :rtype: list[StarShort]
        """
        return self._star_list

    @star_list.setter
    def star_list(self, star_list):
        """Sets the star_list of this TitleData.


        :param star_list: The star_list of this TitleData.  # noqa: E501
        :type: list[StarShort]
        """

        self._star_list = star_list

    @property
    def actor_list(self):
        """Gets the actor_list of this TitleData.  # noqa: E501


        :return: The actor_list of this TitleData.  # noqa: E501
        :rtype: list[ActorShort]
        """
        return self._actor_list

    @actor_list.setter
    def actor_list(self, actor_list):
        """Sets the actor_list of this TitleData.


        :param actor_list: The actor_list of this TitleData.  # noqa: E501
        :type: list[ActorShort]
        """

        self._actor_list = actor_list

    @property
    def full_cast(self):
        """Gets the full_cast of this TitleData.  # noqa: E501


        :return: The full_cast of this TitleData.  # noqa: E501
        :rtype: FullCastData
        """
        return self._full_cast

    @full_cast.setter
    def full_cast(self, full_cast):
        """Sets the full_cast of this TitleData.


        :param full_cast: The full_cast of this TitleData.  # noqa: E501
        :type: FullCastData
        """

        self._full_cast = full_cast

    @property
    def genres(self):
        """Gets the genres of this TitleData.  # noqa: E501


        :return: The genres of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this TitleData.


        :param genres: The genres of this TitleData.  # noqa: E501
        :type: str
        """

        self._genres = genres

    @property
    def genre_list(self):
        """Gets the genre_list of this TitleData.  # noqa: E501


        :return: The genre_list of this TitleData.  # noqa: E501
        :rtype: list[KeyValueItem]
        """
        return self._genre_list

    @genre_list.setter
    def genre_list(self, genre_list):
        """Sets the genre_list of this TitleData.


        :param genre_list: The genre_list of this TitleData.  # noqa: E501
        :type: list[KeyValueItem]
        """

        self._genre_list = genre_list

    @property
    def companies(self):
        """Gets the companies of this TitleData.  # noqa: E501


        :return: The companies of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._companies

    @companies.setter
    def companies(self, companies):
        """Sets the companies of this TitleData.


        :param companies: The companies of this TitleData.  # noqa: E501
        :type: str
        """

        self._companies = companies

    @property
    def company_list(self):
        """Gets the company_list of this TitleData.  # noqa: E501


        :return: The company_list of this TitleData.  # noqa: E501
        :rtype: list[CompanyShort]
        """
        return self._company_list

    @company_list.setter
    def company_list(self, company_list):
        """Sets the company_list of this TitleData.


        :param company_list: The company_list of this TitleData.  # noqa: E501
        :type: list[CompanyShort]
        """

        self._company_list = company_list

    @property
    def countries(self):
        """Gets the countries of this TitleData.  # noqa: E501


        :return: The countries of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this TitleData.


        :param countries: The countries of this TitleData.  # noqa: E501
        :type: str
        """

        self._countries = countries

    @property
    def country_list(self):
        """Gets the country_list of this TitleData.  # noqa: E501


        :return: The country_list of this TitleData.  # noqa: E501
        :rtype: list[KeyValueItem]
        """
        return self._country_list

    @country_list.setter
    def country_list(self, country_list):
        """Sets the country_list of this TitleData.


        :param country_list: The country_list of this TitleData.  # noqa: E501
        :type: list[KeyValueItem]
        """

        self._country_list = country_list

    @property
    def languages(self):
        """Gets the languages of this TitleData.  # noqa: E501


        :return: The languages of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this TitleData.


        :param languages: The languages of this TitleData.  # noqa: E501
        :type: str
        """

        self._languages = languages

    @property
    def language_list(self):
        """Gets the language_list of this TitleData.  # noqa: E501


        :return: The language_list of this TitleData.  # noqa: E501
        :rtype: list[KeyValueItem]
        """
        return self._language_list

    @language_list.setter
    def language_list(self, language_list):
        """Sets the language_list of this TitleData.


        :param language_list: The language_list of this TitleData.  # noqa: E501
        :type: list[KeyValueItem]
        """

        self._language_list = language_list

    @property
    def content_rating(self):
        """Gets the content_rating of this TitleData.  # noqa: E501


        :return: The content_rating of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this TitleData.


        :param content_rating: The content_rating of this TitleData.  # noqa: E501
        :type: str
        """

        self._content_rating = content_rating

    @property
    def im_db_rating(self):
        """Gets the im_db_rating of this TitleData.  # noqa: E501


        :return: The im_db_rating of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._im_db_rating

    @im_db_rating.setter
    def im_db_rating(self, im_db_rating):
        """Sets the im_db_rating of this TitleData.


        :param im_db_rating: The im_db_rating of this TitleData.  # noqa: E501
        :type: str
        """

        self._im_db_rating = im_db_rating

    @property
    def im_db_rating_votes(self):
        """Gets the im_db_rating_votes of this TitleData.  # noqa: E501


        :return: The im_db_rating_votes of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._im_db_rating_votes

    @im_db_rating_votes.setter
    def im_db_rating_votes(self, im_db_rating_votes):
        """Sets the im_db_rating_votes of this TitleData.


        :param im_db_rating_votes: The im_db_rating_votes of this TitleData.  # noqa: E501
        :type: str
        """

        self._im_db_rating_votes = im_db_rating_votes

    @property
    def metacritic_rating(self):
        """Gets the metacritic_rating of this TitleData.  # noqa: E501


        :return: The metacritic_rating of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._metacritic_rating

    @metacritic_rating.setter
    def metacritic_rating(self, metacritic_rating):
        """Sets the metacritic_rating of this TitleData.


        :param metacritic_rating: The metacritic_rating of this TitleData.  # noqa: E501
        :type: str
        """

        self._metacritic_rating = metacritic_rating

    @property
    def ratings(self):
        """Gets the ratings of this TitleData.  # noqa: E501


        :return: The ratings of this TitleData.  # noqa: E501
        :rtype: RatingData
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this TitleData.


        :param ratings: The ratings of this TitleData.  # noqa: E501
        :type: RatingData
        """

        self._ratings = ratings

    @property
    def wikipedia(self):
        """Gets the wikipedia of this TitleData.  # noqa: E501


        :return: The wikipedia of this TitleData.  # noqa: E501
        :rtype: WikipediaData
        """
        return self._wikipedia

    @wikipedia.setter
    def wikipedia(self, wikipedia):
        """Sets the wikipedia of this TitleData.


        :param wikipedia: The wikipedia of this TitleData.  # noqa: E501
        :type: WikipediaData
        """

        self._wikipedia = wikipedia

    @property
    def posters(self):
        """Gets the posters of this TitleData.  # noqa: E501


        :return: The posters of this TitleData.  # noqa: E501
        :rtype: PosterData
        """
        return self._posters

    @posters.setter
    def posters(self, posters):
        """Sets the posters of this TitleData.


        :param posters: The posters of this TitleData.  # noqa: E501
        :type: PosterData
        """

        self._posters = posters

    @property
    def images(self):
        """Gets the images of this TitleData.  # noqa: E501


        :return: The images of this TitleData.  # noqa: E501
        :rtype: ImageData
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this TitleData.


        :param images: The images of this TitleData.  # noqa: E501
        :type: ImageData
        """

        self._images = images

    @property
    def trailer(self):
        """Gets the trailer of this TitleData.  # noqa: E501


        :return: The trailer of this TitleData.  # noqa: E501
        :rtype: TrailerData
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """Sets the trailer of this TitleData.


        :param trailer: The trailer of this TitleData.  # noqa: E501
        :type: TrailerData
        """

        self._trailer = trailer

    @property
    def box_office(self):
        """Gets the box_office of this TitleData.  # noqa: E501


        :return: The box_office of this TitleData.  # noqa: E501
        :rtype: BoxOfficeShort
        """
        return self._box_office

    @box_office.setter
    def box_office(self, box_office):
        """Sets the box_office of this TitleData.


        :param box_office: The box_office of this TitleData.  # noqa: E501
        :type: BoxOfficeShort
        """

        self._box_office = box_office

    @property
    def tagline(self):
        """Gets the tagline of this TitleData.  # noqa: E501


        :return: The tagline of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this TitleData.


        :param tagline: The tagline of this TitleData.  # noqa: E501
        :type: str
        """

        self._tagline = tagline

    @property
    def keywords(self):
        """Gets the keywords of this TitleData.  # noqa: E501


        :return: The keywords of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this TitleData.


        :param keywords: The keywords of this TitleData.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def keyword_list(self):
        """Gets the keyword_list of this TitleData.  # noqa: E501


        :return: The keyword_list of this TitleData.  # noqa: E501
        :rtype: list[str]
        """
        return self._keyword_list

    @keyword_list.setter
    def keyword_list(self, keyword_list):
        """Sets the keyword_list of this TitleData.


        :param keyword_list: The keyword_list of this TitleData.  # noqa: E501
        :type: list[str]
        """

        self._keyword_list = keyword_list

    @property
    def similars(self):
        """Gets the similars of this TitleData.  # noqa: E501


        :return: The similars of this TitleData.  # noqa: E501
        :rtype: list[SimilarShort]
        """
        return self._similars

    @similars.setter
    def similars(self, similars):
        """Sets the similars of this TitleData.


        :param similars: The similars of this TitleData.  # noqa: E501
        :type: list[SimilarShort]
        """

        self._similars = similars

    @property
    def tv_series_info(self):
        """Gets the tv_series_info of this TitleData.  # noqa: E501


        :return: The tv_series_info of this TitleData.  # noqa: E501
        :rtype: TvSeriesInfo
        """
        return self._tv_series_info

    @tv_series_info.setter
    def tv_series_info(self, tv_series_info):
        """Sets the tv_series_info of this TitleData.


        :param tv_series_info: The tv_series_info of this TitleData.  # noqa: E501
        :type: TvSeriesInfo
        """

        self._tv_series_info = tv_series_info

    @property
    def tv_episode_info(self):
        """Gets the tv_episode_info of this TitleData.  # noqa: E501


        :return: The tv_episode_info of this TitleData.  # noqa: E501
        :rtype: TvEpisodeInfo
        """
        return self._tv_episode_info

    @tv_episode_info.setter
    def tv_episode_info(self, tv_episode_info):
        """Sets the tv_episode_info of this TitleData.


        :param tv_episode_info: The tv_episode_info of this TitleData.  # noqa: E501
        :type: TvEpisodeInfo
        """

        self._tv_episode_info = tv_episode_info

    @property
    def error_message(self):
        """Gets the error_message of this TitleData.  # noqa: E501


        :return: The error_message of this TitleData.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this TitleData.


        :param error_message: The error_message of this TitleData.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TitleData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitleData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
