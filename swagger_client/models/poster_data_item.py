# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PosterDataItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'link': 'str',
        'aspect_ratio': 'float',
        'language': 'str',
        'width': 'int',
        'height': 'int'
    }

    attribute_map = {
        'id': 'id',
        'link': 'link',
        'aspect_ratio': 'aspectRatio',
        'language': 'language',
        'width': 'width',
        'height': 'height'
    }

    def __init__(self, id=None, link=None, aspect_ratio=None, language=None, width=None, height=None):  # noqa: E501
        """PosterDataItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._link = None
        self._aspect_ratio = None
        self._language = None
        self._width = None
        self._height = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if link is not None:
            self.link = link
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if language is not None:
            self.language = language
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height

    @property
    def id(self):
        """Gets the id of this PosterDataItem.  # noqa: E501


        :return: The id of this PosterDataItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PosterDataItem.


        :param id: The id of this PosterDataItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def link(self):
        """Gets the link of this PosterDataItem.  # noqa: E501


        :return: The link of this PosterDataItem.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PosterDataItem.


        :param link: The link of this PosterDataItem.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this PosterDataItem.  # noqa: E501


        :return: The aspect_ratio of this PosterDataItem.  # noqa: E501
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this PosterDataItem.


        :param aspect_ratio: The aspect_ratio of this PosterDataItem.  # noqa: E501
        :type: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def language(self):
        """Gets the language of this PosterDataItem.  # noqa: E501


        :return: The language of this PosterDataItem.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PosterDataItem.


        :param language: The language of this PosterDataItem.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def width(self):
        """Gets the width of this PosterDataItem.  # noqa: E501


        :return: The width of this PosterDataItem.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PosterDataItem.


        :param width: The width of this PosterDataItem.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this PosterDataItem.  # noqa: E501


        :return: The height of this PosterDataItem.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PosterDataItem.


        :param height: The height of this PosterDataItem.  # noqa: E501
        :type: int
        """

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PosterDataItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PosterDataItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
