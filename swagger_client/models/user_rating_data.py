# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserRatingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'im_db_id': 'str',
        'title': 'str',
        'full_title': 'str',
        'type': 'str',
        'year': 'str',
        'total_rating': 'str',
        'total_rating_votes': 'str',
        'ratings': 'list[UserRatingDataDetail]',
        'demographic_all': 'UserRatingDataDemographic',
        'demographic_males': 'UserRatingDataDemographic',
        'demographic_females': 'UserRatingDataDemographic',
        'top1000_voters': 'UserRatingDataDemographicDetail',
        'us_users': 'UserRatingDataDemographicDetail',
        'non_us_users': 'UserRatingDataDemographicDetail',
        'error_message': 'str'
    }

    attribute_map = {
        'im_db_id': 'imDbId',
        'title': 'title',
        'full_title': 'fullTitle',
        'type': 'type',
        'year': 'year',
        'total_rating': 'totalRating',
        'total_rating_votes': 'totalRatingVotes',
        'ratings': 'ratings',
        'demographic_all': 'demographicAll',
        'demographic_males': 'demographicMales',
        'demographic_females': 'demographicFemales',
        'top1000_voters': 'top1000Voters',
        'us_users': 'usUsers',
        'non_us_users': 'nonUSUsers',
        'error_message': 'errorMessage'
    }

    def __init__(self, im_db_id=None, title=None, full_title=None, type=None, year=None, total_rating=None, total_rating_votes=None, ratings=None, demographic_all=None, demographic_males=None, demographic_females=None, top1000_voters=None, us_users=None, non_us_users=None, error_message=None):  # noqa: E501
        """UserRatingData - a model defined in Swagger"""  # noqa: E501
        self._im_db_id = None
        self._title = None
        self._full_title = None
        self._type = None
        self._year = None
        self._total_rating = None
        self._total_rating_votes = None
        self._ratings = None
        self._demographic_all = None
        self._demographic_males = None
        self._demographic_females = None
        self._top1000_voters = None
        self._us_users = None
        self._non_us_users = None
        self._error_message = None
        self.discriminator = None
        if im_db_id is not None:
            self.im_db_id = im_db_id
        if title is not None:
            self.title = title
        if full_title is not None:
            self.full_title = full_title
        if type is not None:
            self.type = type
        if year is not None:
            self.year = year
        if total_rating is not None:
            self.total_rating = total_rating
        if total_rating_votes is not None:
            self.total_rating_votes = total_rating_votes
        if ratings is not None:
            self.ratings = ratings
        if demographic_all is not None:
            self.demographic_all = demographic_all
        if demographic_males is not None:
            self.demographic_males = demographic_males
        if demographic_females is not None:
            self.demographic_females = demographic_females
        if top1000_voters is not None:
            self.top1000_voters = top1000_voters
        if us_users is not None:
            self.us_users = us_users
        if non_us_users is not None:
            self.non_us_users = non_us_users
        if error_message is not None:
            self.error_message = error_message

    @property
    def im_db_id(self):
        """Gets the im_db_id of this UserRatingData.  # noqa: E501


        :return: The im_db_id of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._im_db_id

    @im_db_id.setter
    def im_db_id(self, im_db_id):
        """Sets the im_db_id of this UserRatingData.


        :param im_db_id: The im_db_id of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._im_db_id = im_db_id

    @property
    def title(self):
        """Gets the title of this UserRatingData.  # noqa: E501


        :return: The title of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserRatingData.


        :param title: The title of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def full_title(self):
        """Gets the full_title of this UserRatingData.  # noqa: E501


        :return: The full_title of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._full_title

    @full_title.setter
    def full_title(self, full_title):
        """Sets the full_title of this UserRatingData.


        :param full_title: The full_title of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._full_title = full_title

    @property
    def type(self):
        """Gets the type of this UserRatingData.  # noqa: E501


        :return: The type of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserRatingData.


        :param type: The type of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def year(self):
        """Gets the year of this UserRatingData.  # noqa: E501


        :return: The year of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this UserRatingData.


        :param year: The year of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def total_rating(self):
        """Gets the total_rating of this UserRatingData.  # noqa: E501


        :return: The total_rating of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._total_rating

    @total_rating.setter
    def total_rating(self, total_rating):
        """Sets the total_rating of this UserRatingData.


        :param total_rating: The total_rating of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._total_rating = total_rating

    @property
    def total_rating_votes(self):
        """Gets the total_rating_votes of this UserRatingData.  # noqa: E501


        :return: The total_rating_votes of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._total_rating_votes

    @total_rating_votes.setter
    def total_rating_votes(self, total_rating_votes):
        """Sets the total_rating_votes of this UserRatingData.


        :param total_rating_votes: The total_rating_votes of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._total_rating_votes = total_rating_votes

    @property
    def ratings(self):
        """Gets the ratings of this UserRatingData.  # noqa: E501


        :return: The ratings of this UserRatingData.  # noqa: E501
        :rtype: list[UserRatingDataDetail]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this UserRatingData.


        :param ratings: The ratings of this UserRatingData.  # noqa: E501
        :type: list[UserRatingDataDetail]
        """

        self._ratings = ratings

    @property
    def demographic_all(self):
        """Gets the demographic_all of this UserRatingData.  # noqa: E501


        :return: The demographic_all of this UserRatingData.  # noqa: E501
        :rtype: UserRatingDataDemographic
        """
        return self._demographic_all

    @demographic_all.setter
    def demographic_all(self, demographic_all):
        """Sets the demographic_all of this UserRatingData.


        :param demographic_all: The demographic_all of this UserRatingData.  # noqa: E501
        :type: UserRatingDataDemographic
        """

        self._demographic_all = demographic_all

    @property
    def demographic_males(self):
        """Gets the demographic_males of this UserRatingData.  # noqa: E501


        :return: The demographic_males of this UserRatingData.  # noqa: E501
        :rtype: UserRatingDataDemographic
        """
        return self._demographic_males

    @demographic_males.setter
    def demographic_males(self, demographic_males):
        """Sets the demographic_males of this UserRatingData.


        :param demographic_males: The demographic_males of this UserRatingData.  # noqa: E501
        :type: UserRatingDataDemographic
        """

        self._demographic_males = demographic_males

    @property
    def demographic_females(self):
        """Gets the demographic_females of this UserRatingData.  # noqa: E501


        :return: The demographic_females of this UserRatingData.  # noqa: E501
        :rtype: UserRatingDataDemographic
        """
        return self._demographic_females

    @demographic_females.setter
    def demographic_females(self, demographic_females):
        """Sets the demographic_females of this UserRatingData.


        :param demographic_females: The demographic_females of this UserRatingData.  # noqa: E501
        :type: UserRatingDataDemographic
        """

        self._demographic_females = demographic_females

    @property
    def top1000_voters(self):
        """Gets the top1000_voters of this UserRatingData.  # noqa: E501


        :return: The top1000_voters of this UserRatingData.  # noqa: E501
        :rtype: UserRatingDataDemographicDetail
        """
        return self._top1000_voters

    @top1000_voters.setter
    def top1000_voters(self, top1000_voters):
        """Sets the top1000_voters of this UserRatingData.


        :param top1000_voters: The top1000_voters of this UserRatingData.  # noqa: E501
        :type: UserRatingDataDemographicDetail
        """

        self._top1000_voters = top1000_voters

    @property
    def us_users(self):
        """Gets the us_users of this UserRatingData.  # noqa: E501


        :return: The us_users of this UserRatingData.  # noqa: E501
        :rtype: UserRatingDataDemographicDetail
        """
        return self._us_users

    @us_users.setter
    def us_users(self, us_users):
        """Sets the us_users of this UserRatingData.


        :param us_users: The us_users of this UserRatingData.  # noqa: E501
        :type: UserRatingDataDemographicDetail
        """

        self._us_users = us_users

    @property
    def non_us_users(self):
        """Gets the non_us_users of this UserRatingData.  # noqa: E501


        :return: The non_us_users of this UserRatingData.  # noqa: E501
        :rtype: UserRatingDataDemographicDetail
        """
        return self._non_us_users

    @non_us_users.setter
    def non_us_users(self, non_us_users):
        """Sets the non_us_users of this UserRatingData.


        :param non_us_users: The non_us_users of this UserRatingData.  # noqa: E501
        :type: UserRatingDataDemographicDetail
        """

        self._non_us_users = non_us_users

    @property
    def error_message(self):
        """Gets the error_message of this UserRatingData.  # noqa: E501


        :return: The error_message of this UserRatingData.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this UserRatingData.


        :param error_message: The error_message of this UserRatingData.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRatingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRatingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
