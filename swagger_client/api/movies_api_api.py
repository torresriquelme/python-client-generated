# coding: utf-8

"""
    IMDb-API

    The IMDb-API Documentation. You need a <a href='/Identity/Account/Manage' target='_blank'><code>API Key</code></a> for testing APIs.<br/><a class='link' href='/API'>Back to API Tester</a>  # noqa: E501

    OpenAPI spec version: 1.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MoviesApiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def a_pi_awards_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_awards_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_awards_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: AwardData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_awards_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_awards_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_awards_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_awards_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_awards_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: AwardData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_awards_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_awards_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_awards_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Awards/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwardData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_box_office_all_time_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_box_office_all_time_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_box_office_all_time_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: BoxOfficeAllTimeData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_box_office_all_time_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_box_office_all_time_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_box_office_all_time_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_box_office_all_time_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_box_office_all_time_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: BoxOfficeAllTimeData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_box_office_all_time_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_box_office_all_time_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/BoxOfficeAllTime/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoxOfficeAllTimeData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_box_office_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_box_office_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_box_office_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: BoxOfficeWeekendData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_box_office_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_box_office_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_box_office_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_box_office_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_box_office_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: BoxOfficeWeekendData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_box_office_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_box_office_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/BoxOffice/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoxOfficeWeekendData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_coming_soon_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_coming_soon_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_coming_soon_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: NewMovieData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_coming_soon_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_coming_soon_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_coming_soon_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_coming_soon_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_coming_soon_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: NewMovieData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_coming_soon_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_coming_soon_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/ComingSoon/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewMovieData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_company_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_company_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_company_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: CompanyData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_company_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_company_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_company_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_company_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_company_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: CompanyData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_company_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_company_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_company_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Company/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompanyData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_external_sites_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_external_sites_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_external_sites_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ExternalSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_external_sites_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_external_sites_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_external_sites_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_external_sites_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_external_sites_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ExternalSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_external_sites_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_external_sites_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_external_sites_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/ExternalSites/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExternalSiteData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_full_cast_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_full_cast_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_full_cast_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: FullCastData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_full_cast_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_full_cast_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_full_cast_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_full_cast_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_full_cast_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: FullCastData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_full_cast_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_full_cast_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_full_cast_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/FullCast/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FullCastData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_images_api_key_id_get(self, id, api_key, **kwargs):  # noqa: E501
        """a_pi_images_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_images_api_key_id_get(id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str api_key: (required)
        :return: ImageData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_images_api_key_id_get_with_http_info(id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_images_api_key_id_get_with_http_info(id, api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_images_api_key_id_get_with_http_info(self, id, api_key, **kwargs):  # noqa: E501
        """a_pi_images_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_images_api_key_id_get_with_http_info(id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str api_key: (required)
        :return: ImageData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_images_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_images_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_images_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Images/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_images_api_key_id_options_get(self, api_key, id, options, **kwargs):  # noqa: E501
        """a_pi_images_api_key_id_options_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_images_api_key_id_options_get(api_key, id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :param str options: (required)
        :return: ImageData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_images_api_key_id_options_get_with_http_info(api_key, id, options, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_images_api_key_id_options_get_with_http_info(api_key, id, options, **kwargs)  # noqa: E501
            return data

    def a_pi_images_api_key_id_options_get_with_http_info(self, api_key, id, options, **kwargs):  # noqa: E501
        """a_pi_images_api_key_id_options_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_images_api_key_id_options_get_with_http_info(api_key, id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :param str options: (required)
        :return: ImageData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_images_api_key_id_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_images_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_images_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `a_pi_images_api_key_id_options_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'options' in params:
            path_params['options'] = params['options']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Images/{apiKey}/{id}/{options}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_in_theaters_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_in_theaters_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_in_theaters_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: NewMovieData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_in_theaters_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_in_theaters_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_in_theaters_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_in_theaters_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_in_theaters_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: NewMovieData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_in_theaters_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_in_theaters_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/InTheaters/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewMovieData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_keyword_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_keyword_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_keyword_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: KeywordData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_keyword_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_keyword_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_keyword_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_keyword_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_keyword_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: KeywordData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_keyword_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_keyword_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_keyword_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Keyword/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeywordData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_metacritic_reviews_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_metacritic_reviews_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_metacritic_reviews_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: MetacriticReviewData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_metacritic_reviews_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_metacritic_reviews_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_metacritic_reviews_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_metacritic_reviews_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_metacritic_reviews_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: MetacriticReviewData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_metacritic_reviews_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_metacritic_reviews_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_metacritic_reviews_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/MetacriticReviews/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetacriticReviewData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_most_popular_movies_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_most_popular_movies_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_most_popular_movies_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: MostPopularData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_most_popular_movies_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_most_popular_movies_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_most_popular_movies_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_most_popular_movies_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_most_popular_movies_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: MostPopularData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_most_popular_movies_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_most_popular_movies_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/MostPopularMovies/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MostPopularData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_most_popular_t_vs_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_most_popular_t_vs_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_most_popular_t_vs_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: MostPopularData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_most_popular_t_vs_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_most_popular_t_vs_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_most_popular_t_vs_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_most_popular_t_vs_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_most_popular_t_vs_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: MostPopularData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_most_popular_t_vs_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_most_popular_t_vs_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/MostPopularTVs/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MostPopularData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_name_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_name_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_name_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: NameData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_name_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_name_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_name_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_name_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_name_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: NameData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_name_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_name_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_name_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Name/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_name_awards_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_name_awards_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_name_awards_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: NameAwardData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_name_awards_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_name_awards_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_name_awards_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_name_awards_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_name_awards_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: NameAwardData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_name_awards_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_name_awards_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_name_awards_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/NameAwards/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameAwardData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_posters_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_posters_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_posters_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: PosterData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_posters_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_posters_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_posters_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_posters_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_posters_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: PosterData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_posters_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_posters_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_posters_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Posters/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PosterData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_ratings_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_ratings_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_ratings_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: RatingData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_ratings_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_ratings_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_ratings_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_ratings_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_ratings_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: RatingData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_ratings_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_ratings_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_ratings_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Ratings/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RatingData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_reviews_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_reviews_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_reviews_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ReviewData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_reviews_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_reviews_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_reviews_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_reviews_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_reviews_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ReviewData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_reviews_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_reviews_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_reviews_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Reviews/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReviewData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_all_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_all_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_all_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_all_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_all_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_all_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_all_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_all_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_all_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_all_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_all_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchAll/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Search/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_company_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_company_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_company_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_company_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_company_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_company_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_company_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_company_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_company_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_company_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_company_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchCompany/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_episode_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_episode_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_episode_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_episode_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_episode_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_episode_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_episode_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_episode_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_episode_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_episode_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_episode_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchEpisode/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_keyword_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_keyword_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_keyword_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_keyword_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_keyword_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_keyword_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_keyword_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_keyword_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_keyword_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_keyword_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_keyword_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchKeyword/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_movie_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_movie_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_movie_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_movie_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_movie_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_movie_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_movie_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_movie_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_movie_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_movie_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_movie_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchMovie/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_name_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_name_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_name_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_name_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_name_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_name_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_name_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_name_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_name_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_name_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_name_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchName/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_series_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_series_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_series_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_series_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_series_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_series_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_series_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_series_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_series_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_series_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_series_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchSeries/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_search_title_api_key_expression_get(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_title_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_title_api_key_expression_get(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_search_title_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_search_title_api_key_expression_get_with_http_info(api_key, expression, **kwargs)  # noqa: E501
            return data

    def a_pi_search_title_api_key_expression_get_with_http_info(self, api_key, expression, **kwargs):  # noqa: E501
        """a_pi_search_title_api_key_expression_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_search_title_api_key_expression_get_with_http_info(api_key, expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str expression: (required)
        :return: SearchData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_search_title_api_key_expression_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_search_title_api_key_expression_get`")  # noqa: E501
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `a_pi_search_title_api_key_expression_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'expression' in params:
            path_params['expression'] = params['expression']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SearchTitle/{apiKey}/{expression}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_season_episodes_api_key_id_season_number_get(self, api_key, id, season_number, **kwargs):  # noqa: E501
        """a_pi_season_episodes_api_key_id_season_number_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_season_episodes_api_key_id_season_number_get(api_key, id, season_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :param str season_number: (required)
        :return: SeasonEpisodeData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_season_episodes_api_key_id_season_number_get_with_http_info(api_key, id, season_number, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_season_episodes_api_key_id_season_number_get_with_http_info(api_key, id, season_number, **kwargs)  # noqa: E501
            return data

    def a_pi_season_episodes_api_key_id_season_number_get_with_http_info(self, api_key, id, season_number, **kwargs):  # noqa: E501
        """a_pi_season_episodes_api_key_id_season_number_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_season_episodes_api_key_id_season_number_get_with_http_info(api_key, id, season_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :param str season_number: (required)
        :return: SeasonEpisodeData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id', 'season_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_season_episodes_api_key_id_season_number_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_season_episodes_api_key_id_season_number_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_season_episodes_api_key_id_season_number_get`")  # noqa: E501
        # verify the required parameter 'season_number' is set
        if ('season_number' not in params or
                params['season_number'] is None):
            raise ValueError("Missing the required parameter `season_number` when calling `a_pi_season_episodes_api_key_id_season_number_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'season_number' in params:
            path_params['seasonNumber'] = params['season_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/SeasonEpisodes/{apiKey}/{id}/{seasonNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SeasonEpisodeData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_top250_movies_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_top250_movies_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_top250_movies_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: Top250Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_top250_movies_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_top250_movies_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_top250_movies_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_top250_movies_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_top250_movies_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: Top250Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_top250_movies_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_top250_movies_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Top250Movies/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Top250Data',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_top250_t_vs_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_top250_t_vs_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_top250_t_vs_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: Top250Data
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_top250_t_vs_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_top250_t_vs_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_top250_t_vs_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_top250_t_vs_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_top250_t_vs_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: Top250Data
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_top250_t_vs_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_top250_t_vs_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Top250TVs/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Top250Data',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_trailer_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_trailer_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_trailer_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: TrailerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_trailer_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_trailer_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_trailer_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_trailer_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_trailer_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: TrailerData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_trailer_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_trailer_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_trailer_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Trailer/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrailerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_usage_api_key_get(self, api_key, **kwargs):  # noqa: E501
        """a_pi_usage_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_usage_api_key_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: UsageData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_usage_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_usage_api_key_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def a_pi_usage_api_key_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """a_pi_usage_api_key_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_usage_api_key_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :return: UsageData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_usage_api_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_usage_api_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/Usage/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UsageData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_user_ratings_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_user_ratings_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_user_ratings_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: UserRatingData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_user_ratings_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_user_ratings_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_user_ratings_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_user_ratings_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_user_ratings_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: UserRatingData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_user_ratings_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_user_ratings_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_user_ratings_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/UserRatings/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserRatingData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pi_you_tube_trailer_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_you_tube_trailer_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_you_tube_trailer_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: YouTubeTrailerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pi_you_tube_trailer_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pi_you_tube_trailer_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pi_you_tube_trailer_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pi_you_tube_trailer_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pi_you_tube_trailer_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: YouTubeTrailerData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pi_you_tube_trailer_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pi_you_tube_trailer_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pi_you_tube_trailer_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/YouTubeTrailer/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='YouTubeTrailerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_pifaq_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_pifaq_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pifaq_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: FAQData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_pifaq_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_pifaq_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_pifaq_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_pifaq_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_pifaq_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: FAQData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_pifaq_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_pifaq_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_pifaq_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/FAQ/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FAQData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def a_piim_db_list_api_key_id_get(self, api_key, id, **kwargs):  # noqa: E501
        """a_piim_db_list_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_piim_db_list_api_key_id_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: IMDbListData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.a_piim_db_list_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.a_piim_db_list_api_key_id_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def a_piim_db_list_api_key_id_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """a_piim_db_list_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.a_piim_db_list_api_key_id_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: IMDbListData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method a_piim_db_list_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `a_piim_db_list_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `a_piim_db_list_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/API/IMDbList/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IMDbListData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lang_api_report_api_key_id_get(self, lang, id, api_key, **kwargs):  # noqa: E501
        """lang_api_report_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_report_api_key_id_get(lang, id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str id: (required)
        :param str api_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lang_api_report_api_key_id_get_with_http_info(lang, id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.lang_api_report_api_key_id_get_with_http_info(lang, id, api_key, **kwargs)  # noqa: E501
            return data

    def lang_api_report_api_key_id_get_with_http_info(self, lang, id, api_key, **kwargs):  # noqa: E501
        """lang_api_report_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_report_api_key_id_get_with_http_info(lang, id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str id: (required)
        :param str api_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lang', 'id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lang_api_report_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lang' is set
        if ('lang' not in params or
                params['lang'] is None):
            raise ValueError("Missing the required parameter `lang` when calling `lang_api_report_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lang_api_report_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `lang_api_report_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lang' in params:
            path_params['lang'] = params['lang']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{lang}/API/Report/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lang_api_report_api_key_id_options_get(self, lang, id, options, api_key, **kwargs):  # noqa: E501
        """lang_api_report_api_key_id_options_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_report_api_key_id_options_get(lang, id, options, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str id: (required)
        :param str options: (required)
        :param str api_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lang_api_report_api_key_id_options_get_with_http_info(lang, id, options, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.lang_api_report_api_key_id_options_get_with_http_info(lang, id, options, api_key, **kwargs)  # noqa: E501
            return data

    def lang_api_report_api_key_id_options_get_with_http_info(self, lang, id, options, api_key, **kwargs):  # noqa: E501
        """lang_api_report_api_key_id_options_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_report_api_key_id_options_get_with_http_info(lang, id, options, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str id: (required)
        :param str options: (required)
        :param str api_key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lang', 'id', 'options', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lang_api_report_api_key_id_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lang' is set
        if ('lang' not in params or
                params['lang'] is None):
            raise ValueError("Missing the required parameter `lang` when calling `lang_api_report_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lang_api_report_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `lang_api_report_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `lang_api_report_api_key_id_options_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lang' in params:
            path_params['lang'] = params['lang']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'options' in params:
            path_params['options'] = params['options']  # noqa: E501
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{lang}/API/Report/{apiKey}/{id}/{options}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lang_api_title_api_key_id_get(self, lang, id, api_key, **kwargs):  # noqa: E501
        """lang_api_title_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_title_api_key_id_get(lang, id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str id: (required)
        :param str api_key: (required)
        :return: TitleData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lang_api_title_api_key_id_get_with_http_info(lang, id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.lang_api_title_api_key_id_get_with_http_info(lang, id, api_key, **kwargs)  # noqa: E501
            return data

    def lang_api_title_api_key_id_get_with_http_info(self, lang, id, api_key, **kwargs):  # noqa: E501
        """lang_api_title_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_title_api_key_id_get_with_http_info(lang, id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str id: (required)
        :param str api_key: (required)
        :return: TitleData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lang', 'id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lang_api_title_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lang' is set
        if ('lang' not in params or
                params['lang'] is None):
            raise ValueError("Missing the required parameter `lang` when calling `lang_api_title_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lang_api_title_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `lang_api_title_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lang' in params:
            path_params['lang'] = params['lang']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{lang}/API/Title/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TitleData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lang_api_title_api_key_id_options_get(self, lang, api_key, id, options, **kwargs):  # noqa: E501
        """lang_api_title_api_key_id_options_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_title_api_key_id_options_get(lang, api_key, id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str api_key: (required)
        :param str id: (required)
        :param str options: (required)
        :return: TitleData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lang_api_title_api_key_id_options_get_with_http_info(lang, api_key, id, options, **kwargs)  # noqa: E501
        else:
            (data) = self.lang_api_title_api_key_id_options_get_with_http_info(lang, api_key, id, options, **kwargs)  # noqa: E501
            return data

    def lang_api_title_api_key_id_options_get_with_http_info(self, lang, api_key, id, options, **kwargs):  # noqa: E501
        """lang_api_title_api_key_id_options_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_title_api_key_id_options_get_with_http_info(lang, api_key, id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str api_key: (required)
        :param str id: (required)
        :param str options: (required)
        :return: TitleData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lang', 'api_key', 'id', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lang_api_title_api_key_id_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lang' is set
        if ('lang' not in params or
                params['lang'] is None):
            raise ValueError("Missing the required parameter `lang` when calling `lang_api_title_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `lang_api_title_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lang_api_title_api_key_id_options_get`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `lang_api_title_api_key_id_options_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lang' in params:
            path_params['lang'] = params['lang']  # noqa: E501
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'options' in params:
            path_params['options'] = params['options']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{lang}/API/Title/{apiKey}/{id}/{options}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TitleData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lang_api_wikipedia_api_key_id_get(self, lang, api_key, id, **kwargs):  # noqa: E501
        """lang_api_wikipedia_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_wikipedia_api_key_id_get(lang, api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str api_key: (required)
        :param str id: (required)
        :return: WikipediaData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lang_api_wikipedia_api_key_id_get_with_http_info(lang, api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.lang_api_wikipedia_api_key_id_get_with_http_info(lang, api_key, id, **kwargs)  # noqa: E501
            return data

    def lang_api_wikipedia_api_key_id_get_with_http_info(self, lang, api_key, id, **kwargs):  # noqa: E501
        """lang_api_wikipedia_api_key_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lang_api_wikipedia_api_key_id_get_with_http_info(lang, api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lang: (required)
        :param str api_key: (required)
        :param str id: (required)
        :return: WikipediaData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lang', 'api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lang_api_wikipedia_api_key_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lang' is set
        if ('lang' not in params or
                params['lang'] is None):
            raise ValueError("Missing the required parameter `lang` when calling `lang_api_wikipedia_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `lang_api_wikipedia_api_key_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lang_api_wikipedia_api_key_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lang' in params:
            path_params['lang'] = params['lang']  # noqa: E501
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{lang}/API/Wikipedia/{apiKey}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WikipediaData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
